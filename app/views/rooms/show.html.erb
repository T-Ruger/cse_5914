<h1>
  <%= @room.name %>
</h1>

<style>
	.row {
    min-height: 90%;
	}
	.my-3 {
    height: 80vh;
	}
	.chat {
    min-height: 80vh;
	}
</style>
<div class = "row">
	<div class = "col">
		<div class="overflow-auto" style="height: 85vh;" id="results-container">
		</div>
	</div>
	
	<!-- chat container -->
  <div class="col" style="max-width: 30vw;">
    <div class="chat" data-channel-subscribe="room" data-room-id="<%= @room.id %>">
      <% @room_messages.each do |room_message| %>
      	<% if !room_message.watsonmsg %>
		      <div class="chat-message-container">
		        <div class="row no-gutters">
		          <div class="col">
		            <div class="message-content">
		              <p class="text-left" data-role="message-text" style="padding-left: 5px; padding-right: 5px">
		                <%= room_message.message %>
		              </p>
		            </div>
		          </div>  
		        </div>
		      </div>
        <% else %>
        	<div class="chat-message-container">
		        <div class="row no-gutters">
		        	<div class="col-auto text-center">
		        	  <img src="<%= room_message.user.gravatar_url %>" class="avatar" alt="">
		        	</div>
		          <div class="col">
		            <div class="watson-message-content">
		              <p class="text-left" data-role="message-text" style="padding-left: 5px; padding-right: 5px" >
		                <%= room_message.message %>
		              </p>
		            </div>
		          </div>  
		        </div>
		      </div>
        <% end %>
      <% end %>
    </div>
		<!--chat box input form-->
    <%= simple_form_for @room_message, remote: true do |form| %>
      <div class="input-group mb-3">
        <%= form.input :message, as: :string,
                                 wrapper: false,
                                 label: false,
                                 input_html: {
                                   class: 'chat-input',
                                   autocomplete: 'off'
                                 } %>
        <div class="input-group-append">
          <%= form.submit "Send", class: 'btn btn-primary chat-input', id: "submit" %>
        </div>
      </div>

      <%= form.input :room_id, as: :hidden %>
    <% end %>
  </div>
</div>

<!-- Templates for messages -->
<div class="d-none" data-role="message-template">
  <div class="chat-message-container">
    <div class="row no-gutters">
      <div class="col">
        <div class="message-content">
          <p class="text-left" data-role="message-text" style="padding-left: 5px; padding-right: 5px">

          </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="d-none" data-role="watson-message-template">
  <div class="chat-message-container">
    <div class="row no-gutters">
    	<div class="col-auto text-center">
        <img src="" class="avatar" alt="" data-role="user-avatar">
      </div>  
      <div class="col">
        <div class="watson-message-content">
          <p class="mb-1" data-role="message-text" style="padding-left: 5px; padding-right: 5px">
          </p>
          </div>
        </div>
      </div> 
    </div>
  </div>
</div>
<script>
  var api_key = "305ae312343163e9a891637b00d624c9"
  var BASE_PATH = "https://api.themoviedb.org/3"
  var POSTER_PATH =  "https://image.tmdb.org/t/p/w154"
  var SORT_BY = "sort_by=popularity.desc"
  var AMP = "&"
  var INCLUDE_ADULT = "include_adult=false"
  var PAGE_NUM = "page=1"
  var LANGUAGE = "language=en-US"
  var GENRES = new Map()
  GENRES.set('action', 28)
  GENRES.set('adventure', 12)
  GENRES.set('animation', 16)
  GENRES.set('comedy', 35)
  GENRES.set('crime', 80)
  GENRES.set('documentary', 99)
  GENRES.set('drama', 18)
  GENRES.set('family', 10751)
  GENRES.set('fantasy', 14)
  GENRES.set('history', 36)
  GENRES.set('horror', 27)
  GENRES.set('music', 10402)
  GENRES.set('mystery', 9648)
  GENRES.set('romance', 10749)
  GENRES.set('science fiction', 878)
  GENRES.set('tv movie', 10770)
  GENRES.set('war', 10752)
  GENRES.set('western', 37)
  class TMDB {
    find(movie) {
      var request = new XMLHttpRequest()
      var urlStr = BASE_PATH + '/search/movie?api_key=' + api_key + '&language=en-US&query=' + encodeURI(movie) + '&page=1&include_adult=false'
      request.open('GET', urlStr, true)
      return request
    }
    cast(person) {
      var request = new XMLHttpRequest()
      var urlStr = BASE_PATH + '/search/person?api_key=' + api_key +'&language=en-US&query=' + encodeURI(person) + '&page=1&include_adult=false'
      request.open('GET', urlStr, false)
      console.log(urlStr)
      return request
    }

    popular() {
      var request = new XMLHttpRequest()
      var urlStr = BASE_PATH + '/popular?api_key=' + api_key +'&language=en-US&page=1'
      request.open('GET', urlStr, true)
      return request;
    }
    top_rated() {
      var request = new XMLHttpRequest()
      var urlStr = BASE_PATH + '/movie/top_rated?api_key=' + api_key + '&language=en-US&page=1'
      request.open('GET', urlStr, true)
      return request;
    }

    similar(movie_id) {
      var request = new XMLHttpRequest()
      var urlStr = BASE_PATH + '/movie/' + movie_id + '/similar?api_key=' + api_key + '&language=en-US&page=1'
      request.open('GET', urlStr, true)
      return request;
    }
    image(path) {
      var request = new XMLHttpRequest()
      var urlStr = POSTER_PATH + "w500/" + path
      request.open('GET', urlStr, true)
      return request
    }

    multiSearch(attributes) {
      var request = new XMLHttpRequest()
      var urlStr = BASE_PATH + "/discover/movie?api_key=" + api_key + AMP + LANGUAGE + AMP + SORT_BY + AMP + INCLUDE_ADULT + AMP + PAGE_NUM
      for (let [key, value] of attributes) {
      	
        if (key == 'with_genres') {
          value = GENRES.get(value.toLowerCase())
        }
        
        if (key == 'with_people'){
        	var people = value
        	var people_str = ""
        	//iterate through each requested person
        	people.forEach(person => {
        		var personrequest = database.cast(person)
        		personrequest.onload = function () {
        			//get result, parse to get id
        			var data = JSON.parse(this.response)
        			var results = data["results"]
        			var id = results[0]["id"]
        			//append id to string, with comma if necessary
        			if(people_str.length > 0){
        				people_str+=","
        			}
        			people_str += id.toString()
        		}
        		personrequest.send()
        	})
        	value = people_str
        }
        
        //remove 'if' once people is implemented
      	urlStr = urlStr + AMP + key + "=" + value
      }
      request.open('GET', urlStr, true)
      console.log(urlStr)
      return request
    }

  }
  var database = new TMDB();
  function updateList(attributes) {
        //alert(gon.user_movies)
      	//console.log(attributes)
        var request = database.multiSearch(attributes)
        request.onload = function () {
        
      		//get and clear results container div
      		const resultsContainer = document.getElementById('results-container')
      		resultsContainer.innerHTML = ""
      		
      		//Begin accessing JSON data here
      		var data = JSON.parse(this.response)
      		var results = data["results"]
      		var i = 0;
      		var numColumns = 6
      		//start new grid row
      		var gridRow = `<div class = "card-group">`
          var row = 0;
          var movie_info = [];
          let movie_map =  new Map();
      		results.forEach(movie => {
            let movie_indiv = new Map()
            movie_indiv.set("movie_id", movie.id)
            movie_indiv.set("title", movie.original_title)
            movie_indiv.set("poster_path", movie.poster_path)
            movie_indiv.set("short_desc", movie.overview)
            movie_map.set("movie" + movie.id, movie_indiv)
      			//set number of cards per row
      			if(i >= numColumns){
      				//close gridRow div
      				gridRow += `</div>`
      				
      				//append row to resultsContainer 
      				resultsContainer.innerHTML += gridRow
      				
      				//start new row
      				gridRow = `<div class = "card-group">`
      				i = 0
      			}

            var count;
            var watched = false;
            for(count = 0; count < gon.user_movies.length; count++) {
              if(gon.user_movies[count].movie_id == movie.id) {
                watched = true;
              }
            }

            //HTML for movie card
            var movieCard;
            if(watched) {
              movieCard = `<div class="card" style="background-color: #000">
                            <div>
                              <img class="card-img-top" src="${POSTER_PATH + movie.poster_path}" alt="Card image cap" title="${movie.overview}">
                            </div>
                            <div class="card-body d-flex flex-column">
                              <h5 class="card-title" style="color: #EEE">${movie.original_title} (${movie.release_date.substring(0,4)})</h5>
                                  
                              <div class="btn-group-vertical dropup mt-auto">
                                <button type="button" disabled class="btn btn-primary" style="background-color: #BBB; color:blue">Already on your Watchlist</button>
                              </div>
                            </div>
                          </div>`;
            } 
            else {  
              movieCard = `<div class="card">
                            <div>
                              <img class="card-img-top" src="${POSTER_PATH + movie.poster_path}" alt="Card image cap" title="${movie.overview}">
                            </div>
                            <div class="card-body d-flex flex-column">
                              <h5 class="card-title" data-role="card-title">${movie.original_title} (${movie.release_date.substring(0,4)})</h5>
                                  
                              <div class="btn-group-vertical dropup mt-auto">
                                <button type="button" class="btn btn-warning seen"  id="movie${movie.id}" remote="true" onclick="alreadySeen(${movie.id})">Already seen</button>
                                <button type="button" class="btn btn-primary watch" id="movie${movie.id}" remote="true">Add To Watchlist</button>
                              </div>
                            </div>
                          </div>`;
            }
														
						//add card to row								
      			gridRow += movieCard
      			i++

      		})
      		//append leftover cards
      		if(i > 0){
      			while (i < numColumns) {
      				gridRow += `<div class="card"></div>`
      				i++
      			}
      			gridRow += '</div>'
      			resultsContainer.innerHTML += gridRow
      		}
          $('.seen').bind("click", function() {
              var curr = movie_map.get(event.target.id)
              $.ajax({
                url: "/create",
                type: "get",
                data: { 'id': curr.get("movie_id"),
                        'title': curr.get("title"),
                        'poster_path': curr.get("poster_path"),
                        'short_desc': curr.get("short_desc")}
              })
            })
          $('.watch').bind("click", function() {
              var curr = movie_map.get(event.target.id)
              $.ajax({
                url: "/create_watch",
                type: "get",
                data: { 'id': curr.get("movie_id"),
                        'title': curr.get("title"),
                        'poster_path': curr.get("poster_path"),
                        'short_desc': curr.get("short_desc")}
              })
            })
      		
    	}
    	request.send()
      
  }
  var m = new Map();
	updateList(m)
	
	function alreadySeen(id) {
		document.getElementById("room_message_message").value = "I've already seen this movie."
    document.getElementById("submit").click()	
	}
	
  function createTableHead(table) {
    var header = document.createElement("thead")
    header.id = "resultsHeader"
    header.className = "thead-dark"
    var row = document.createElement("tr")
    header.appendChild(row)
    var title = document.createElement("th")
    var description = document.createElement("th")
    var poster = document.createElement("th")
    title.appendChild(document.createTextNode("Title"))
    poster.appendChild(document.createTextNode("Poster"))
    description.appendChild(document.createTextNode("Description"))
    title.setAttribute("style", "width: 25%")
    description.setAttribute("style", "width: 25%")
    poster.setAttribute("style", "width: 50%")
    row.appendChild(title)
    row.appendChild(poster)
    row.appendChild(description)
    table.appendChild(header)
  }

  function deleteTable(){
    var tblHead = document.getElementById("resultsHeader");
    if(tblHead) tblHead.parentNode.removeChild(tblHead);

    var tbl = document.getElementById("results");
    if(tbl) tbl.parentNode.removeChild(tbl);
  }


  /*
  * Retrieves the first page of results delievered by TMDB's
  * movie database.
  */
  function getMovie(){
    deleteTable()
    createTableHead(document.getElementById("movies"))
    // Movie being searched for
    var movie =  document.getElementById("search").value
    // HTTP request to find movies fitting that title using 
    // TMDB's API.
    var request = database.find(movie)

    // Output results returned by API call.
    request.onload = function() {
      var body = document.createElement("tbody")
      body.id = "results"
      document.getElementById("movies").appendChild(body)
        // Begin accessing JSON data here
      var data = JSON.parse(this.response)
      var results = data["results"]
      // Create a row for each movie.
      results.forEach(movie => {
        // Create row element for the movie
        // and applicable fields for movie information.
          var row = document.createElement("tr")
          var title = document.createElement("td")
          var image = document.createElement("td")
          var description = document.createElement("td")
          // Create text nodes for movie information.

          // Movie Title
          var titleResp = document.createTextNode(movie.original_title)
          // Movie Description
          var overview = document.createTextNode(movie.overview)
          title.appendChild(titleResp)
          description.appendChild(overview)
          row.appendChild(title)
          document.getElementById("results").appendChild(row)
          var img = document.createElement("img");
          img.src = POSTER_PATH + movie.poster_path
          image.appendChild(img)
          row.appendChild(img)
          row.appendChild(description)
          
      })
    }

    // Send request
    request.send()  
  }
</script>

